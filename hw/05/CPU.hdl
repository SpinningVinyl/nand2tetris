/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // instruction decoder

    // if the MSB of instruction is not set, then it's an A-instruction 
    Not(in = instruction[15], out = Ainstr);
    // otherwise it's a C-instruction
    Not(in = Ainstr, out = Cinstr);

    // A-reg controls
    /* if C-instruction and the destination bit for A is set,
    * ALU is writing to A */
    And(a = Cinstr, b = instruction[5], out = ALUtoA);
    Mux16(a[0..14] = instruction[0..14], a[15] = false, b = ALUout, sel = ALUtoA, out = Ain);
    /* if A-instruction or ALU is writing to A,
    * set the load input of A register to true */
    Or(a = Ainstr, b = ALUtoA, out = Aload);
    ARegister(in = Ain, load = Aload, out = Aout, out[0..14] = addressM);

    // D-reg controls
    /* if C-instruction and the destination bit for D is set,
    * set the load input of D register to true */
    And(a = Cinstr, b = instruction[4], out = Dload);
    DRegister(in = ALUout, load = Dload, out = Dout);

    // bit 12 of the instruction switches between A and M
    Mux16(a = Aout, b = inM, sel = instruction[12], out = ALUin);

    // ALU
    ALU(x = Dout, y = ALUin,
        zx = instruction[11], nx= instruction[10],
        zy = instruction[9], ny = instruction[8],
        f = instruction[7], no = instruction[6], 
        out = outM, out = ALUout, 
        zr = zero, ng = neg);
    
    // are we writing to memory?
    And(a = Cinstr, b = instruction[3], out = writeM);

    // do we need to jump?
    /* Hint: we don't need to handle the special case
    * for unconditional jump (where all jump bits are set),
    * because it satisfies at least one condition for
    * conditional jump anyway :-) */
    Or(a = zero, b = neg, out = notPos);
    Not(in = notPos, out = pos);
    And(a = instruction[1], b = zero, out = jeq);
    And(a = instruction[2], b = neg, out = jlt);
    And(a = instruction[0], b = pos, out = jgt);
    Or(a = jeq, b = jlt, out = jle);
    Or(a = jle, b = jgt, out = jump);
    /* if C-instruction and jump, 
    * set the load input of program counter to true */
    And(a = Cinstr, b = jump, out = PCload);
    // if not jumping, increment
    Not(in = PCload, out = PCinc);

    // program counter
    PC(in = Aout, inc = PCinc, load = PCload, reset = reset, out[0..14] = pc);
    
}
